package chapter14;

import java.util.Iterator;
import java.util.stream.Stream;

/**
 * <h1>2. 스트림(stream)</h1>
 */
public class Chapter14_2 {

    /**
     * <p>
     *     <h5>2.1 스트림이란?</h5><br>
     *     지금까지 우리는 많은 수의 데이터를 다룰 때, 컬렉션이나 배열에 데이터를 담고 원하는 결과를 얻기 위해 {@code for}문과 {@link Iterator}를 이용해서<br>
     *     코드를 작성해왔다. 그러나 이러한 방식으로 작성된 코드는 너무 길고 알아보기 어렵다. 그리고 재사용성도 떨어진다.<br>
     *      또 다른 문제는 데이터 소스마다 다른 방식으로 다뤄야한다는 것이다. {@link java.util.Collection}이나 {@link Iterator}와 같은 인터페이스를 이용해서 컬렉션을<br>
     *     다루는 방식을 표준화하기는 했지만, 각 컬렉션 클래스에는 같은 기능의 메서드들이 중복해서 정의되어 있다.<br>
     *     이러한 문제점들을 해결하기 위해서 만든 것이 '스트림({@link Stream})'이다. 스트림은 데이터 소스를 추상화하고, 데이터를 다루는데 자주 사용되는 메서드들을 정의해 놓았다.<br>
     *     데이터소스를 추상화하엿다는 것은, 데이터 소스가 무엇이던 간에 같은 방식으로 다룰 수 있게 되었다는 것과 코드의 재사용성이 높아진다는 것을 의미한다.<br>
     *     스트림을 이용하면, 배열이나 컬렉션뿐만 아니라 파일에 저장된 데이터도 모두 같은 방식으로 다룰 수 있다.
     * </p>
     */
    static class Memo{}

    /**
     * <p>
     *     <h5>스트림은 데이터 소스를 변경하지 않는다.</h5><br>
     *     스트림은 데이터 소스로 부터 데이터를 일기만할 뿐, 데이터 소스를 변경하지 않는다는 차이가 있다. 필요하다면, 정렬된 결과를 컬렉션이나 배열에 담아서 반환할 수도 있다.
     * </p>
     */
    static class Memo02{}

    /**
     * <p>
     *     <h5>스트림은 일회용이다.</h5><br>
     *     스트림은 {@link Iterator}처럼 일회용이다. {@link Iterator}로 컬렉션의 요소를 모두 읽고 나면 다시 사용할 수 없는 것처럼,<br>
     *     스트림도 한번 사용하면 닫혀서 다시 사용할 수 없다. 필요하다면 스트림을 다시 생성해야한다.
     * </p>
     */
    static class Memo03{}

    /**
     * <p>
     *     <h5>스트림은 작업을 내부 반복으로 처리한다.</h5><br>
     *     스트림을 이용한 작업이 간결할 수 있는 비결중의 하나가 바로 '내부 반복'이다. 내부 반복이라는 것은 반복문을 메서드의 내부에 숨길 수 있다는 것을 의미한다.
     * </p>
     */
    static class Memo04{}

    /**
     * <p>
     *     <h5>스트림의 연산</h5><br>
     *     스트림이 제공하는 다양한 연산을 이용해서 복잡한 작업들을 간단히 처리할 수 있다.<br>
     *     <small>※ 스트림에 정의된 메서드 중에서 데이터 소스를 다루는 작업을 수행하는 것을 연산(operation)이라고 한다.</small><br>
     *     스트림이 제공하는 연산은 중간 연산과 최종 연산으로 분류할 수 있는데, 중간 연산은 연산결과를 스트림으로 반환하기 떄문에 중간 연산을 연속해서 연결할 수 있다.<br>
     *     반면에 최종 연산은 스트림의 요소를 소모하면서 연산을 수행하므로 단 한번만 연산이 가능하다.<br>
     *     <b>중간 연산</b> - 연산 결과가 스트림인 연산. 스트림에 연속해서 중간 연산할 수 있음.<br>
     *     <b>최종 연산</b> - 연산 결과가 스트림이 아닌 연산. 스트림의 요소를 소모하므로 단 한번만 가능<br>
     *     모든 중간 연산의 결과는 스트림이지만, 연산 전의 스트림과 같은 것은 아니다.
     * </p>
     */
    static class Memo05{}



}
