package chapter14;

/**
 * <h1>1. 람다식(Lambda expression)</h1>
 */
public class Chapter14 {

	/**
	 * <p>
	 *     자바가 1996년에 처음 등장한 이후로 두 번의 큰 변화가 있었는데, 한번은 JDK1.5부터 추가된 지네릭스(generics)의 등장이고,<br>
	 *     또 한 번은 JDK1.8부터 추가된 람다식(lambda expression)의 등장이다.<br>
	 *     특히 람다식의 도입으로 인해, 이제 자바는 객체지향언어인 동시에 함수형 언어가 되었다.
	 * </p>
	 */
	class Memo01{}

	/**
	 * <p>
	 *     <h5>1.1 람다식이란?</h5><br>
	 *     람다식(Lambda expression)은 간단히 말해서 메서드를 하나의 '식(expression)'으로 표현한 것이다.<br>
	 *     람다식은 함수를 간략하면서도 명확한 식으로 표현할 수 있게 해준다.<br>
	 *     메서드를 람다식으로 표현하면 메서드의 이름과 반환값이 없어지므로, 람다식을 '익명 함수(anonymous function)'이라고도 한다.<br>
	 *     <code>
	 *         int[] arr = new int[5];<br>
	 *         Arrays.setAll(arr, <b>(i) -> (int)(Math.random()*5)+1)</b>;
	 *     </code>
	 *     <br>
	 *     람다식은 메서드의 매개변수로 전달되어지는 것이 가능하고, 메서드의 결과로 반환될 수도 있다. 람다식으로 인해 메서드를 변수처럼 다루는 것이 가능해진 것이다.<br>
	 *     ※메서드와 함수의 차이<br>
	 *     - 객체지향개념에서는 함수(function)대신 객체의 행위나 동작을 의미하는 메서드(method)라는 용어를 사용한다.<br>
	 *       메서드는 함수와 같은 의미이지만, 특정 클래스에 반드시 속해야 한다는 제약이 있기 때문에 기존의 함수와 같은 의미의 다른 용어를 선택해서 사용한 것이다.<br>
	 *       그러나 이제 다시 람다식을 통해 메서드가 하나의 독립적인 기능을 하기 때문에 함수라는 용어를 사용하게 되었다.<br>
	 * </p>
	 */
	class Memo02{}

	/**
	 * <p>
	 *     <h5>1.2 람다식 작성하기</h5><br>
	 * </p>
	 */
	class Memo03{}

}
