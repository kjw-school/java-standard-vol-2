package chapter16;

/**
 * <h5>2. 소켈 프로그래밍</h5><br>
 * 소켓 프로그래밍은 소켓을 이용한 통신 프로그래밍을 뜻하는데, 소켓(socket)이란 프로세스간의 통신에 사용되는 양쪽 끝단(endpoint)을 의미한다.<br>
 * 서로 멀리 떨어진 두 사람이 통신하기 위해서 전화기가 필요한 것처럼, 프로세스간의 통신을 위해서는 그 무언가가 필요하고 그것이 바로 소켓이다.<br>
 * 자바에서는 java.net패키지를 통해 소켓 프로그래밍을 지원하는데, 소켓통신에 사용되는 프로토콜에 따라 다른 종류의 소켓을 구현하여 제공한다.
 */
public class Chapter16_2 {

	/**
	 * <h5>2.1 TCP와 UDP</h5><br>
	 * TCP/IP 프로토콜은 이기종 시스템간의 통신을 위한 표준 프로토콜로 프로토콜의 집합이다.<br>
	 * TCP와 UDP 모두 TCP/IP 프로토콜(TCP/IP protocol suites)에 포함되어 있으며, OSI 7계층의 전송계층(transport layer)에 해당하는 프로토콜이다.<br>
	 * TCP와 UDP는 전송방식이 다르다.<br>
	 * TCP와 UDP의 비교<br>
	 * <table>
	 *     <thead>
	 *         <th>항목</th>
	 *         <th>TCP</th>
	 *         <th>UDP</th>
	 *     </thead>
	 *     <tbody>
	 *         <tr>
	 *             <td>연결방식</td>
	 *             <td>
	 *                 연결기반(connection-oriented)<br>
	 *                 - 연결 후 통신(전화기)<br>
	 *                 - 1:1 통신방식
	 *             </td>
	 *             <td>
	 *                 비연결기반(connectionless-oriented)<br>
	 *                 - 연결없이 통신(소포)<br>
	 *                 - 1:1, 1:n, n:n 통신방식
	 *             </td>
	 *         </tr>
	 *         <tr>
	 *             <td>특징</td>
	 *             <td>
	 *                 데이터의 경계를 구분안함(byte-stream)<br>
	 * 	               신뢰성 있는 데이터 전송<br>
	 * 	               - 데이터의 전송순서가 보장됨<br>
	 * 	               - 데이터의 수신여부를 확인함<br>
	 * 	                 (데이터가 손실되면 재전송됨)<br>
	 * 	               - 패킷을 관리할 필요가 없음<br>
	 * 	               UDP보다 전송속도가 느림
	 *             </td>
	 *             <td>
	 *                 데이터의 경계를 구분함.(datagram)<br>
	 *                 신뢰성 없는 데이터 전송<br>
	 *                 - 데이터의 전송순서가 바뀔 수 있음<br>
	 *                 - 데이터의 수신여부를 확인안함<br>
	 *                   (데이터가 손실되어도 알 수 없음)<br>
	 *                 - 패킷을 관리해주어야 함<br>
	 *                 TCP보다 전송속도가 빠름
	 *             </td>
	 *         </tr>
	 *         <tr>
	 *             <td>관련클래스</td>
	 *             <td>
	 *                 Socket<br>
	 *                 ServerSocket
	 *             </td>
	 *             <td>
	 *                 DatagramSocket<br>
	 *                 DatagramPacket<br>
	 *                 MulticastSocket
	 *             </td>
	 *         </tr>
	 *     </tbody>
	 * </table>
	 * <br>
	 * TCP를 이용한 통신은 전화에, UDP를 이용한 통신은 소포에 비유된다.<br>
	 * TCP는 데이터를 전송하기 전에 먼저 상대편과 연결을 한 후에 데이터를 전송하며 잘 전송되었는지 확인하고 전송에 실패했다면 해당 데이터를 재전송하기 때문에 신뢰 있는 데이터의 전송이 요구되는 통신에 적합하다.<br>
	 * UDP는 상대편과 연결하지 않고 데이터를 전송하며, 데이터를 전송하지만 데이터가 바르게 수신되었는지 확인하지 않기 때문에 데이터가 전송되었는지 확인할 길이 없다. 또한 데이터를 보낸 순서대로 수신한다는 보장이 없다.<br>
	 * 대신 이러한 확인과정이 필요하지 않기 때문에 TCP에 비해 빠른 전송이 가능하다.
	 */
	class Memo1 {

	}

	/**
	 * <h5>2.2 TCP소켓 프로그래밍</h5><br>
	 * 서버 프로그램과 클라이언트 프로그램간의 통신과정을 단계별로 보면 다음과 같다.<br>
	 * <pre><code>
	 *     1. 서버 프로그램에서는 서버소켓을 사용해서 서버 컴퓨터의 특정 포트에서 클라이언트의 연결요청을 처리할 준비를 한다.
	 *     2. 클라이언트 프로그램은 접속할 서버의 IP주소와 포트 정보를 가지고 소켓을 생성해서 서버에 연결을 요청한다.
	 *     3. 서버소켓은 클라이언트의 연결요청을 받으면 서버에 새로운 소켓을 생성해서 클라이언트의 소켓과 연결되도록 한다.
	 *     4. 이제 클라이언트의 소켓과 새로 생성된 서버의 소켓은 서버소켓과 관계없이 일대일 통신을 한다.
	 * </code></pre>
	 * <br>
	 * 서버소켓(ServerSocket)은 포트와 결합(bind)되어 포트를 통해 원격 사용자의 연결요청을 기다리다가 연결요청이 올 때마다 새로운 소켓을 생성하여 상대편 소케과 통신할 수 있도록 연결한다.<br>
	 * 여기까지가 서버소켓의 역할이고, 실제적인 데이터 통신은 서버소켓과 관계없이 소켓과 소켓 간에 이루어진다.<br>
	 * 이는 마치 전화시스템과 유사해서 서버소켓은 전화교환기에, 소켓은 전화기에 비유할 수 있다.<br>
	 * 여기까지가 서버소켓의 역할이고, 실제적인 데이터 통신은 서버소켓과 관계없이 소켓과 소켓 간에 이루어진다.<br>
	 * 이는 마치 전화시스템과 유사해서 서버소켓은 전화교환기에, 소켓은 전화기에 비유할 수 있다.<br>
	 * 전화교환기(서버소켓)는 외부전화기(원격 소켓)로부터 걸려온 전화를 내부의 전화기(소켓)로 연결해주고 실제 통화는 전화기(소켓) 대 전화기(원격 소켓)로 이루어지게 하기 때문이다.<br>
	 * 여러 개의 소켓이 하나의 포트를 공유해서 사용할 수 있지만, 서버소켓은 다르다.<br>
	 * 서버소켓은 포트를 독점한다. 만일 한 포트를 둘 이상의 서버소켓과 연결하는 것이 가능하다면 클라이언트 프로그램이 어떤 서버소켓과 연결되어야하는지 알 수 없을 것이다.<br>
	 * 포트(port)는 호스트(컴퓨터)가 외부와 통신을 하기 위한 통로로 하나의 호스트가 65536개의 포트를 가지고 있으며 포트는 번호로 구별된다.<br>
	 * 포트의 번호는 0~65535의 범위에 속하는 값인데 보통 1023번 이하의 포트는 FTP나 Telnet과 같은 기존의 다른 통신 프로그램들에 의해서 사용되는 경우가 많기 때문에 1023번 이상의 번호 중에서 사용하지 않는 포트를 골라서 사용해야 한다.<br>
	 * <small>※ 두 서버소켓이 서로 다른 프로토콜을 사용하는 경우에는 같은 포트를 사용할 수 있다. 포트는 같아도 클라이언트 프로그램이 사용하는 프로토콜로 어떤 서버소켓과 연결되어야하는지 구별할 수 있기 때문이다.</small><br>
	 * 다시 정리하면, 서버소켓은 소켓간의 연결만 처리하고 실제 데이터는 소켓들끼리 서로 주고받는다. 소켓들이 데이터를 주고받는 연결통로는 바로 입출력스트림이다.<br>
	 * 소켓은 두 개의 스트림, 입력스트림과 출력스트림을 가지고 있으며, 이 스트림들은 연결된 상대편 소켓의 스트림들과 교차연결된다.<br>
	 * 한 소켓의 입력스틀미은 상대편 소켓의 출력스트림과 연결되고, 출력스트림은 입력스트림과 연결된다.<br>
	 * 그래서 한 소켓에서 출력스트림으로 데이터를 보내면 상대편 소켓에서는 입력스트림으로 받게 된다.<br>
	 * 자바에서는 TCP를 이용한 소켓프로그래밍을 위해 Socket과 ServerSocket클래스를 제공하며 다음과 같은 특징을 갖는다.<br>
	 * <pre><code>
	 *     Socket - 프로세스간의 통신을 담당하며, InputStream과 OutputStream을 가지고 있다. 이 두 스트림을 통해 프로세스간의 통신(입출력)이 이루어진다.
	 *     ServerSocket - 포트와 연결(bind)되어 외부의 연결요청을 기다리다 연결요청이 들어오면, Socket을 생성해서 소켓과 소켓간의 통신이 이루어지도록 한다. 한 포트에 하나의 ServerSocket만 연결할 수 있다.
	 *                    (프로토콜이 다르면 같은 포트를 공유할 수 있다.)
	 * </code></pre>
	 */
	class Memo2 {

	}

	/**
	 * <h5>2.3 UDP소켓 프로그래밍</h5><br>
	 * TCP소켓 프로그래밍에서는 Socket과 ServerSocket을 사용하지만, UDP소켓 프로그래밍에서는 DatagramSocket과 DatagramPacket을 사용한다.<br>
	 * UDP는 연결지향적인 프로토콜이 아니기 때문에 ServerSocket이 필요하지 않다.<br>
	 * UDP통신에서 사용하는 소켓은 DatagramSocket이며 데이터를 DatagramPacket에 담아서 전송한다.<br>
	 * DatagramPacket은 헤더와 데이터로 구성되어 있으며, 헤더에는 DatagramPacket을 수신할 호스트의 정보(호스트의 주소와 포트)가 저장되어 있다.<br>
	 * 소포(packet)에 수신할 상대편의 주소를 적어서 보내는 것과 같다고 이해하면 된다.<br>
	 * 그래서 DatagramPacket을 전송하면 DatagramPacket에 지정된 주소(호스트의 포트)의 DatagramSocket에 도착한다.
	 */
	class Memo3 {

	}

}
