package chapter11;

/**
 * <h1>1.9 TreeSet</h1><br>
 * TreeSet은 이진 검색 트리(binary search tree)라는 자료구조의 형태로 데이터를 저장하는 컬렉션 클래스이다.<br>
 * 이진 검색 트리는 정렬, 검색, 범위검색(ranger search)에 높은 성능을 보이는 자료구조이며 TreeSet은 이진 검색 트리의 성능을 향상시킨 '레드-블랙 트리(Red-Black tree)'로 구현되어 있다.<br>
 * Set인터페이스를 구현했으므로 중복된 데이터의 저장을 허용하지 않으며 정렬된 위치에 저장하므로 저장순서를 유지하지도 않는다.<br>
 * 이진 트리(binary tree)는 링크드리스트처럼 여러 개의 노드(node)가 서로 연결된 구조로, 각 노드에 최대 2개의 노드를 연결할 수 있으며 '루트(root)'라고 불리는 하나의 노드에서부터 시작해서 계속 확장해 나갈 수 있다.<br>
 * 위 아래로 연결된 두 노드를 '부모-자식관계'에 있다고 하며 위의 노드를 부모 노드, 아래의 노드를 자식 노드라 한다. 부모-자식관계는 상대적인 것이며 하나의 부모 노드는 최대 두 개의 자식 노드와 연결될 수 있다.<br>
 * <small>※트리(tree)는 각 노드간의 연결된 모양이 나무와 같다고 해서 붙여진 이름이다.</small><br>
 * 이진 검색 트리(binary search tree)는 부모노드의 왼쪽에는 부모노드의 값보다 작은 값의 자식노드를 오른쪽에는 큰 값의 자식노드를 저장하는 이진 트리이다.<br>
 * 첫 번째로 저장되는 값은 루트가 되고, 두 번째 값은 트리의 루트부터 시작해서 값의 크기를 비교하면서 트리를 따라 내려간다.<br>
 * 컴퓨터는 알아서 값을 비교하지 못한다.<br>
 * TreeSet에 저장되는 객체가 Comparable을 구현하던가 아니면, TreeSet에게 Comparator를 제공해서 두 객체를 비교할 방법을 알려줘야 한다. 그렇지 않으면, TreeSet에 객체를 저장할 때 예외가 발생한다.<br>
 * TreeSet은 이처럼 정렬된 상태를 유지하기 때문에 단일 값 검색과 범위검색(range search)이 매우 빠르다.<br>
 * 저장된 값의 개수에 비례해서 검색시간이 증가하긴 하지만 값의 개수가 10배 증가해도 특정 값을 찾는데 필요한 비교횟수가 3~4번만 증가할 정도로 검색효율이 뛰어난 자료구조이다.<br>
 * 트리는 데이터를 순차적으로 저장하는 것이 아니라 저장위치를 찾아서 저장해야하고, 삭제하는 경우 트리의 일부를 재구성해야하므로 링크드 리스트보다 데이터의 추가/삭제 시간은 더 걸린다.<br>
 * 대신 배열이나 링크드 리스트에 비해 검색과 정렬기능이 더 뛰어나다.<br>
 * <pre><code>
 *     이진 검색 트리(binary search tree)는
 *     		- 모든 노드는 최대 두 개의 자식노드를 가질 수 있다.
 *     		- 왼쪽 자식노드의 값은 부모노드의 값보다 작고 오른쪽자식노드의 값은 부모노드의 값보다 커야한다.
 *     		- 노드의 추가 삭제에 시간이 걸린다.(순차적으로 저장하지 않으므로)
 *     		- 검색(범위검색)과 정렬에 유리하다.
 *     		- 중복된 값을 저장하지 못한다.
 * </code></pre>
 * <br>
 * headSet메서드와 tailSet메서드를 이용하면, TreeSet에 저장된 객체 중 지정된 기준 값보다 큰 값의 객체들과 작은 값의 객체들을 얻을 수 있다.
 */
public class Chapter11_1_9 {
}
